#! /usr/bin/env sh
# -*- mode: sh-shell; -*-
# ============================================================================ #


# ---------------------------------------------------------------------------- #

as_me=cdeps;


# ---------------------------------------------------------------------------- #

usage() {
  echo "\
Usage: $as_me [OPTION...] FILE [-- CFLAGS]
Print header dependencies for C/C++ file.

Options:
  -s, --system   Include system headers in output. Equivelant to \`gcc -MM'.
  -C, --cxx      Process as C++ file.
  -D, --defines  Scape \`#ifdef' symbols and set all to 1.
  -h, --help     Print this help message.
  -- CFLAGS      Any flags provided after \`--' are passed as compiler flags.

Compiler tries \`CC' or \`CXX' if \`--cxx' was indicated, if unset these fall
back to \`gcc' and \`g++' respectively.
";
}


# ---------------------------------------------------------------------------- #

# Option settings
TARGET=;
SYSDEPS=;
DO_CXX=;
DEFINES=;


# ---------------------------------------------------------------------------- #

# Split options
LONG_OPTS='-l help -l system -l cxx -l defines'
# FIXME: this assumes GNU implementation
OPTIONS=$( getopt -n "$as_me" "$LONG_OPTS" -o 'shCD' -- "$@"; );
VALID_OPTIONS="$?";

if test "$VALID_OPTIONS" != 0; then
  echo "$as_me: encountered invalid options" > /dev/stderr;
  usage > /dev/stderr;
  exit 1;
fi


# Parse options
eval set -- "$OPTIONS";
while :; do
  case "$1" in
    -h|--help)
      usage;
      exit 0;
    ;;
    -s|--system)
      SYSDEPS=:;
    ;;
    -C|--cxx)
      DO_CXX=:;
    ;;
    -D|--defines)
      DEFINES=:;
    ;;
    --)
      shift;
      break;
    ;;
    *)
      if test -z "$TARGET"; then
        TARGET="$1";
      else
        echo "$as_me: unexpected option: $1" > /dev/stderr;
        usage > /dev/stderr;
        exit 1;
      fi
    ;;
  esac
  shift;
done


# ---------------------------------------------------------------------------- #

if test -z "$TARGET"; then
  TARGET="$1";
  shift;
fi

# Strip off leading `./' or any other wonky pathname stuff that `CC -M' drops.
TARGET=$( realpath --relative-to "$PWD" "$TARGET"; );


# Remaining args are considered compiler flags
if test "$#" -gt 0; then
  CFLAGS="$*";
fi


# ---------------------------------------------------------------------------- #

if test "$SYSDEPS"; then
  CFLAGS="${CFLAGS+$CFLAGS }-M";
else
  CFLAGS="${CFLAGS+$CFLAGS }-MM";
fi


# ---------------------------------------------------------------------------- #

# Select compiler
if test "$DO_CXX"; then
  CC="${CXX:-$( which g++; )}";
else
  : "${CC:=$( which gcc; )}";
fi


# ---------------------------------------------------------------------------- #

_getifnames() {
  ifnames "$TARGET" 2>/dev/null|cut -d' ' -f1;
}


_joinlines() {
  sed ':x; /\\$/ { N; s/\\\n//; tx }' /dev/stdin;
}

_wslines() {
  tr -s '\t' ' ' < /dev/stdin         \
    |sed -e 's/^ \+//' -e 's/ \+$//'  \
    |tr ' ' '\n';
}

_getdeps() {
  # Remove the target file and fake target.
  # Suppress debug output from CPP.
  $CC -MT '' "$TARGET" "$CFLAGS"|sed -e 's/^: //';
}

_getdeps_post() {
  _getdeps|_joinlines|_wslines|grep -v "^${TARGET#\.#\\\.}\$";
}


# ---------------------------------------------------------------------------- #

# Scrape `#ifdef' symbols and set all of them to 1 using `-D<NAME>'.
# This is far from exhaustive considering that combinations of these symbols
# might be incompatible; but this covers a large number of use cases.
if test "$DEFINES"; then
  # FIXME: Permutate over defines
  #CFLAGS_SAVED="${CFLAGS}";
  for d in $( _getifnames; ); do
    CFLAGS="${CFLAGS+$CFLAGS }-D$d";
  done
fi


# ---------------------------------------------------------------------------- #

_getdeps_post;


# ---------------------------------------------------------------------------- #



# ============================================================================ #
# vim: set filetype=sh :
