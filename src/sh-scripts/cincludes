#! /usr/bin/env sh
# -*- mode: sh-shell; -*-
# ============================================================================ #
#
# Scrape `#include' lines from file.
#
# ---------------------------------------------------------------------------- #

set -eu;

# ---------------------------------------------------------------------------- #

as_me=cincludes;

usage() {
  usage_msg="Usage: $as_me [OPTIONS...] [-h|--help|-u|--usage] FILE";
  if "${1:-}" != '-f'; then echo "$usage_msg"; return; fi
  echo "$usage_msg

Scrape \`#include' lines from file.

This is similar to \`gcc -M ...' except that it will not recursively
process \`#include' lines, it will not print any includes which may result
from particular compilers, and will not be sensitive to \`#if(|def|ndef)'
lines which may conditionally include other files.

OPTIONS
  -L,--no-local   ignore local ( quoted ) includes
  -S,--no-system  ignore local ( quoted ) includes
  -h,--help       show this help message
  -u,--usage      show brief usage message
";
}


# ---------------------------------------------------------------------------- #

IGNORE_SYSTEM=;
IGNORE_LOCAL=;

while test "$#" -gt 0; do
  case "$1" in
    -h|--help)      usage -f; exit 0; ;;
    -u|--usage)     usage;    exit 0; ;;
    -S|--no-system) IGNORE_SYSTEM=:; ;;
    -L|--no-local)  IGNORE_LOCAL=:; ;;
    --) break; ;;
    -*) echo "$as_me: Unrecognized argument '$1'" >&2; usage -f >&2; exit 1; ;;
    *)  break; ;;
  esac
  shift;
done

if test "$#" -ne 1; then
  usage >&2;
  exit 1;
fi

if test "$IGNORE_SYSTEM$IGNORE_LOCAL" = '::'; then
  echo "$as_me: --no-system and --no-local options cannot be used together" >&2;
  exit 1;
fi


# ---------------------------------------------------------------------------- #

TARGET="$1";
shift;

if ! test -r "$TARGET"; then
  echo "$as_me: Cannot read file '$TARGET'" >&2;
  exit 1;
fi


# ---------------------------------------------------------------------------- #

_joinlines() {
  sed ':x; /\\$/ { N; s/\\\n//; tx }' "$1";
}

_matchpp() {
  grep '^\s*#\s*include\s*' < /dev/stdin;
}

_strippp() {
  sed 's:^\s*\#\s*include\s\+::' < /dev/stdin;
}

_rmcomments() {
  sed -e 's:/\*.*?\*/::g' -e 's:/\*.*$::' -e 's://.*$::' < /dev/stdin;
}

_wslines() {
  tr -s '\t' ' ' < /dev/stdin|sed -e 's/^ \+//' -e 's/ \+$//'|tr ' ' '\n';
}

_doignores() {
  if test -z "$IGNORE_SYSTEM$IGNORE_LOCAL"; then
    cat < /dev/stdin;
  elif test -n "$IGNORE_SYSTEM"; then
    grep -v '<' < /dev/stdin;
  else
    grep -v '"' < /dev/stdin;
  fi
}

_getsymbols() {
  sed -e 's:^"\([^"]\+\)"$:\1:' -e 's:^<\([^"]\+\)>$:\1:' < /dev/stdin;
}


# ---------------------------------------------------------------------------- #

_joinlines "$TARGET"  \
  |_matchpp           \
  |_strippp           \
  |_rmcomments        \
  |_wslines           \
  |_doignores         \
  |_getsymbols        \
;


# ---------------------------------------------------------------------------- #
#
#
#
# ============================================================================ #
# vim: set filetype=sh :
