#! /usr/bin/env sh
# -*- mode: sh-shell; -*-
# ============================================================================ #
#
#
# ---------------------------------------------------------------------------- #

SNAME=cincludes;

function usage() {
  echo "\
Usage: ${SNAME} FILE

Scrape \`#include' lines from file.

This is similar to \`gcc -M ...' except that it will not recursively
process \`#include' lines, it will not print any includes which may result
from particular compilers, and will not be sensitive to \`#if(|def|ndef)'
lines which may conditionally include other files.";

  exit ${1};
}


# ---------------------------------------------------------------------------- #

if test "x${1}" = "x-h" || test "x${1}" = "x--help"; then
  usage 0;
fi

if test ${#} != 1; then
  usage 1 >&2;
fi


# ---------------------------------------------------------------------------- #

TARGET=${1};
shift;

if ! test -r ${TARGET}; then
  echo "${SNAME}: Cannot read file: ${TARGET}" >&2;
  exit 1;
fi


# ---------------------------------------------------------------------------- #

function _joinlines() {
  cat ${1:--}|sed ':x; /\\$/ { N; s/\\\n//; tx }';
}

function _matchpp() {
  cat ${1:--}|grep '^\s*\#\s*include\s*';
}

function _strippp() {
  cat ${1:--}|sed 's:^\s*\#\s*include\s\+::';
}

function _rmcomments() {
  cat ${1:--}|sed -e 's:/\*.*?\*/::g' -e 's:/\*.*$::' -e 's://.*$::';
}

function _wslines() {
  cat ${1:--}|tr -s $'\t' ' '|sed -e 's/^ \+//' -e 's/ \+$//'|tr ' ' '\n';
}

function _getsymbols() {
  cat ${1:--}|sed -e 's:^"\([^"]\+\)"$:\1:' -e 's:^<\([^"]\+\)>$:\1:';
}


# ---------------------------------------------------------------------------- #

_joinlines ${TARGET}|_matchpp|_strippp|_rmcomments|_wslines|_getsymbols;


# ---------------------------------------------------------------------------- #


# ============================================================================ #
# vim: set filetype=sh :
