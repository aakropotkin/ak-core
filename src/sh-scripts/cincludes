#! /usr/bin/env sh
# -*- mode: sh-shell; -*-
# ============================================================================ #
#
#
# ---------------------------------------------------------------------------- #

set -eu;

# ---------------------------------------------------------------------------- #

as_me=cincludes;

usage() {
  echo "\
Usage: $as_me FILE

Scrape \`#include' lines from file.

This is similar to \`gcc -M ...' except that it will not recursively
process \`#include' lines, it will not print any includes which may result
from particular compilers, and will not be sensitive to \`#if(|def|ndef)'
lines which may conditionally include other files.
";
}


# ---------------------------------------------------------------------------- #

if test "$#" != 1; then
  usage >&2;
  exit 1;
fi

if test "$1" = "-h" || test "$1" = "--help"; then
  usage;
  exit 0;
fi


# ---------------------------------------------------------------------------- #

TARGET="$1";
shift;

if ! test -r "$TARGET"; then
  echo "$as_me: Cannot read file '$TARGET'" >&2;
  exit 1;
fi


# ---------------------------------------------------------------------------- #

_joinlines() {
  sed ':x; /\\$/ { N; s/\\\n//; tx }' "$1";
}

_matchpp() {
  grep '^\s*#\s*include\s*' < /dev/stdin;
}

_strippp() {
  sed 's:^\s*\#\s*include\s\+::' < /dev/stdin;
}

_rmcomments() {
  sed -e 's:/\*.*?\*/::g' -e 's:/\*.*$::' -e 's://.*$::' < /dev/stdin;
}

_wslines() {
  tr -s '\t' ' ' < /dev/stdin|sed -e 's/^ \+//' -e 's/ \+$//'|tr ' ' '\n';
}

_getsymbols() {
  sed -e 's:^"\([^"]\+\)"$:\1:' -e 's:^<\([^"]\+\)>$:\1:' < /dev/stdin;
}


# ---------------------------------------------------------------------------- #

_joinlines "$TARGET"|_matchpp|_strippp|_rmcomments|_wslines|_getsymbols;


# ---------------------------------------------------------------------------- #


# ============================================================================ #
# vim: set filetype=sh :
