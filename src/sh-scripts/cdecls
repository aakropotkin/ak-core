#! /usr/bin/env sh
# -*- mode: sh-shell; sh-shell: sh; -*-
# ============================================================================ #
#
#
# ---------------------------------------------------------------------------- #

as_me=cdecls;
if test "$ZSH_VERSION"; then
  chpwd() { :; }
fi


# ---------------------------------------------------------------------------- #

usage() {
  echo "\
Usage: $as_me [OPTION...] FILE [-- CFLAGS]
Print declarations for C/C++ file.

Options:
  -C, --cxx      Process as C++ file.
  -D, --defines  Scape \`#ifdef' symbols and set all to 1.
  -h, --help     Print this help message.
  -- CFLAGS      Any flags provided after \`--' are passed as compiler flags.

Compiler tries \`CC' or \`CXX' if \`--cxx' was indicated, if unset these fall
back to \`gcc' and \`g++' respectively.
";
}


# ---------------------------------------------------------------------------- #

# Option settings
TARGET=;
DO_CXX=;
DEFINES=;


# ---------------------------------------------------------------------------- #

# Split options
LONG_OPTS='-l help -l cxx -l defines'
OPTIONS=$( getopt -n "$as_me" "$LONG_OPTS" -o 'hCD' -- "$@"; );
VALID_OPTIONS="$?";

if test "$VALID_OPTIONS" != 0; then
  echo "$as_me: encountered invalid options" > /dev/stderr;
  usage > /dev/stderr;
  exit 1;
fi


# Parse options
eval set -- "$OPTIONS";
while :; do
  case "$1" in
    -h|--help)
      usage 0;
    ;;
    -C|--cxx)
      DO_CXX=:;
    ;;
    -D|--defines)
      DEFINES=:;
    ;;
    --)
      shift;
      break;
    ;;
    *)
      if test -z "$TARGET"; then
        TARGET="$1";
      else
        echo "$as_me: unexpected option: $1" > /dev/stderr;
        usage > /dev/stderr;
        exit 1;
      fi
    ;;
  esac
  shift;
done


# ---------------------------------------------------------------------------- #

if test -z "$TARGET"; then
  TARGET="$1";
  shift;
fi

TARGET=$( readlink -f "$TARGET"; );


# Remaining args are considered compiler flags
if test "$#" -gt 0; then
  CFLAGS="$*";
fi


# ---------------------------------------------------------------------------- #

# Select compiler
if test "$DO_CXX"; then
  CC="${CXX:-$( which g++; )}";
else
  : "${CC:=$( which gcc; )}";
fi


# ---------------------------------------------------------------------------- #

_getifnames() {
  ifnames "$TARGET"|cut -d' ' -f1 2 > /dev/null;
}


# Scrape `#ifdef' symbols and set all of them to 1 using `-D<NAME>'.
# This is far from exhaustive considering that combinations of these symbols
# might be incompatible; but this covers a large number of use cases.
if test "$DEFINES"; then
  # FIXME: Permutate over defines
  #CFLAGS_SAVED="${CFLAGS}";
  for d in $( _getifnames; ); do
    CFLAGS="${CFLAGS+$CFLAGS }-D$d";
  done
fi


# ---------------------------------------------------------------------------- #

# Make a temporary directory, and cd to it.
# Running the ADA spec generator often creates more files than the one targeted,
# so it's easier just to wipe out the directory.
TD=$( mktemp -dt "$as_me-XXXXXX"; );
ODIR="$PWD";
trap 'cd "$ODIR"; rm -rf "$TD"; exit 1;' 1 2 3 15;
cd "$TD"||exit;


# ---------------------------------------------------------------------------- #

cat "$TARGET" > spec.c;
$CC -c -fdump-ada-spec spec.c;

if ! test -r spec_c.ads; then
  echo "Failed to produce ADA Spec File" > /dev/stderr;
  cd "$ODIR"||exit;
  rm -rf "$TD";
  exit 1;
fi

grep 'External_Name' spec_c.ads|cut -d'"' -f2;


# ---------------------------------------------------------------------------- #

# Cleanup
cd "$ODIR"||exit;
rm -rf "$TD";
exit 0;


# ---------------------------------------------------------------------------- #



# ============================================================================ #
# vim: set filetype=sh :
