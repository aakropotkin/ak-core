#! /usr/bin/env sh
# -*- mode: sh-shell; sh-shell: sh; -*-
# ============================================================================ #
#
#
# ---------------------------------------------------------------------------- #
#
# Required Fields:
#   dlname
#   library_names
#   old_library
#   inherited_linker_flags
#   dependency_libs
#   weak_library_names
#   current
#   age
#   revision
#   installed
#   shouldnotlink
#   dlopen
#   dlpreopen
#   libdir
#
#
# ---------------------------------------------------------------------------- #

if test ${#} -lt 1; then
  echo "You must provide a path to a library" >&2;
  exit 1;
fi


# ---------------------------------------------------------------------------- #

vmajor=0;
vminor=0;
vage=0;
libdir='';
installed=yes;
declare -a libnames=();
declare -a libpaths=();
declare -a dependency_libs=();


# ---------------------------------------------------------------------------- #

while test ${#} -gt 0
do
  if test -d "${1}"; then
    libdir="$( realpath -s ${1}; )";
    for l in ${libnames[*]}; do
      lib="$( realpath -s ${libdir}/${l}; )";
      if test -f "${lib}"; then
        libpaths+=( "${lib}" );
      else
        echo "No such file ${lib}" >&2;
        exit 1;
      fi
    done
    libnames=( $( basename -a ${libpaths[*]}; ) );
  else
    if test -n "${libdir}"; then
      lib="$( realpath -s ${libdir}/${1}; )";
      if test -f "${lib}"; then
        libpaths+=( "${lib}" );
        libnames+=( "$( basename ${lib}; )" );
      else
        echo "No such file ${lib}" >&2;
        exit 1;
      fi
    else
      libnames+=( "${1}" );
    fi
  fi
  shift;
done


# ---------------------------------------------------------------------------- #

# Set libdir if it is unset

if test -z "${libdir}"; then
  if test "$( dirname $( realpath -s ${libnames[*]}; )|uniq|wc -l; )" -gt 1
  then
    echo "Libraries do not share a single libdir" >&2;
    exit 1;
  fi
  libdir=$( dirname $( realpath -s ${libnames[0]}; ); );
  for l in ${libnames[*]}; do
    lib="${libdir}/${l}";
    if test -f "${lib}"; then
      libpaths+=( "$( realpath -s ${lib}; )" );
      continue;
    fi
    lib="${libdir}/$( basename ${l}; )";
    if test -f "${lib}"; then
      libpaths+=( "$( realpath -s ${lib}; )" );
    else
      echo "No such file ${lib}" >&2;
      exit 1;
    fi
  done
  libnames=( $( basename -a ${libpaths[*]}; ) );
fi


# ---------------------------------------------------------------------------- #

if test "$( basename ${libdir}; )" = ".libs"; then
  installed=no;
fi


# ---------------------------------------------------------------------------- #

function common_prefix() {
  echo "${@}"|tr ' ' '\n'  \
    |sed -e 'N;s/^\(.*\).*\n\1.*$/\1/';
}


# ---------------------------------------------------------------------------- #

function collect_symlink_names() {
  target="${1}";
  names="$( basename ${target}; )";
  while :
  do
    frsl="$( file -b ${target}; )";
    if echo "${frsl}"|grep -q '^symbolic link to '; then
      dir="$( dirname ${target}; )";
      target="${dir}/$( echo ${frsl}|cut -d' ' -f4; )";
      names="$( basename ${target}; ) ${names}";
    else
      break;
    fi
  done
  echo "${names}";
}


# ---------------------------------------------------------------------------- #

# find canonical library name
lname="$( common_prefix ${libnames[*]}|sed -e 's/\.so.*$//' -e 's/\.$//'; )";


# ---------------------------------------------------------------------------- #

# For debugging
function dump_vars() {
  echo "libname:         ${lname}";
  echo "dlname:          ${dlname}";
  echo "library_names:   ${library_names[*]}";
  echo "old_library:     ${old_library}";
  echo "current:         ${vmajor}";
  echo "age:             ${vage}";
  echo "revision:        ${vminor}";
  echo "installed:       ${installed}";
  echo "dependency_libs: ${dependency_libs[*]}";
  echo "libdir:          ${libdir}";
  echo '';
}


# ---------------------------------------------------------------------------- #

function _soname() {
  readelf -dW ${1} 2>/dev/null|grep SONAME|cut -d'[' -f2|sed 's/]$//';
}



# ---------------------------------------------------------------------------- #

# Process libnames into library_names, dlname, and old_library
declare -a library_names=();
old_library='';

for l in ${libnames[*]}; do
  if file -b ${libdir}/${l}|grep -q '^current ar archive$'; then
    old_library="${l}";
  elif file -b ${libdir}/${l}|grep -q '^ELF 64-bit .* shared object, '; then
    soname="$( _soname ${libdir}/${l}; )";
    if test -n "${soname}"; then
      test -n "${soname}" && dlname="${soname}";
    fi
    library_names+=( ${l} );
  else
    library_names+=( $( collect_symlink_names ${libdir}/${l}; ) );
  fi
done

# Dedup
library_names=( $( echo "${library_names[*]}"|tr ' ' '\n'|sort|uniq; ) );


# ---------------------------------------------------------------------------- #

# Set old_library if it wasn't caught yet.
if test -z "${old_library}"; then
  for l in $( find ${libdir} -type f -name "${lname}*.a"; ); do
    if file -Lb ${l}|grep -q '^current ar archive$'; then
      old_library="$( basename ${l}; )";
      break;
    fi
  done
fi


# ---------------------------------------------------------------------------- #

# Look for symlinks in same directory
for l in $( find ${libdir} -type l -name "${lname}*"; ); do
  if file -Lb ${l}|grep -q '^current ar archive$'; then
    continue;
  fi
  lreal="$( basename $( readlink -f ${l}; ); )";
  if echo " ${library_names[*]} "|grep -q " ${lreal} " ; then
    library_names+=( "$( basename ${l}; )" );
  fi
done

# Dedup
library_names=( $( echo "${library_names[*]}"|tr ' ' '\n'|sort -r|uniq; ) );


# ---------------------------------------------------------------------------- #

# Set dlname if it wasn't caught earlier.
if test -z "${dlname}"; then
  soname="$( _soname ${libdir}/${library_names[1]}; )";
  if test -n "${soname}"; then
    test -n "${soname}" && dlname="${soname}";
  fi
fi
if test -z "${dlname}"; then
  for l in ${library_names[*]}; do
    if ! test -L ${libdir}/${l}; then
      dlname="${l}";
      break;
    fi
  done
fi


# ---------------------------------------------------------------------------- #

# Scrape version
if test -n "${dlname}"; then
  lreal="$( basename $( readlink -f ${libdir}/${dlname}; ); )";
  version="$( echo ${lreal}|sed 's/^lib.*\.so\.//'; )";
  vmajor="$( echo ${version}|cut -d'.' -f1; )";
  vminor="$( echo ${version}|cut -d'.' -f2; )";
  vage="$( echo ${version}|cut -d'.' -f3; )";
fi


# ---------------------------------------------------------------------------- #

# Collect dependencies.
# This is going to be an approximation based on `NEEDED' entries and `R(UN)PATH'
declare -a ignored_deps=(
  'libm'
  'libc'
  'libgcc_s'
);
ignored_deps_pat="$( echo ${ignored_deps[*]}|tr ' ' '|'|sed 's/|$//'; )";
declare -a deps=();

# See if we have `lddtree'
if lddtree -V 2>&1 1>/dev/null; then
  deps=(
    $( LD_LIBRARY_PATH='' lddtree -l ${libdir}/${dlname}   \
         |grep -v "^${libdir}/${dlname}"                   \
         |grep -v "ld-linux-.*\.so[^/]*$"                  \
         |egrep -v "/(${ignored_deps_pat})\.so[^/]*\$";
     )
  );
fi

# Dedup
deps=( $( echo "${deps[*]}"|tr ' ' '\n'|sort -r|uniq; ) );


# ---------------------------------------------------------------------------- #

# Try to replace dependencies with `.la' alternatives in the same directory.
for l in ${deps[*]}; do
  ldalt=$( echo "${l}"|sed 's/\.\(so[^/]*\|a\)$/\.la/'; );
  if test -f ${ldalt}; then
    dependency_libs+=( ${ldalt} );
  else
    dependency_libs+=( ${l} );
  fi
done

# Dedup
dependency_libs=( $( echo "${dependency_libs[*]}"|tr ' ' '\n'|sort -r|uniq; ) );


# ---------------------------------------------------------------------------- #

# `.la' files lie about their libdir when "uninstalled".
# IE: they never write `<PATH>/.libs' in the value.
# So we will align with this behavior ( despite it being evil ).
if test "x${installed}" = "xno"; then
  libdir="$( dirname ${libdir}; )";
fi


# ---------------------------------------------------------------------------- #

LT_TEMPLATE="\
# ${lname}.la - a libtool library file
# Generated by gen-la (ak-core) 0.1.0
#
# Please DO NOT delete this file!
# It is necessary for linking the library.

# The name that we can dlopen(3).
dlname='${dlname}'

# Names of this library.
library_names='${library_names[*]}'

# The name of the static archive.
old_library='${old_library}'

# Linker flags that cannot go in dependency_libs.
inherited_linker_flags=''

# Libraries that this one depends upon.
dependency_libs='${dependency_libs[*]}'

# Names of additional weak libraries provided by this library
weak_library_names=''

# Version information for ${lname}.
current=${vmajor}
age=${vage}
revision=${vminor}

# Is this an already installed library?
installed=${installed}

# Should we warn about portability when linking against -modules?
shouldnotlink=no

# Files to dlopen/dlpreopen
dlopen=''
dlpreopen=''

# Directory that this library needs to be installed in:
libdir='${libdir}'\
";


# ---------------------------------------------------------------------------- #

echo "${LT_TEMPLATE}";


# ---------------------------------------------------------------------------- #



# ============================================================================ #
# vim: set filetype=sh :
