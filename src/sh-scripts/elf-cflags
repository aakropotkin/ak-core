#! /usr/bin/env sh
# -*- mode: sh-shell; -*-
# ============================================================================ #
#
#
# ---------------------------------------------------------------------------- #

usage() {
echo "\
elf-cflags [DWARF-DEPTH] FILE
  DWARF-DEPTH   Search depth for DWARF data, as used by \`objdump'
  FILE          An ELF binary ( executable or shared object )
";
}



# ---------------------------------------------------------------------------- #

DWARF_DEPTH=1;

case "$#" in
  2) DWARF_DEPTH="$1"; shift ;;
  1) ;;
  *) usage > /dev/stderr; exit 1; ;;
esac

TARGET="$1";
shift;


# ---------------------------------------------------------------------------- #

if test ! -f "$TARGET"; then
  echo "No such file \`$TARGET'" > /dev/stderr;
  exit 3;
fi


# ---------------------------------------------------------------------------- #

_is_elf_bin() {
  file -Lb "$1" 2> /dev/stdout                                             \
    |grep -q '^ELF \(32\|64\)-bit LSB \(executable\|shared object\), .*';
}

if ! _is_elf_bin "$TARGET"; then
  echo "File \`$TARGET' is not an ELF binary" > /dev/stderr;
  exit 4;  
fi


# ---------------------------------------------------------------------------- #

_has_dwarf() {
  objdump -w -Wi "$1" 2> /dev/stdout|grep -q DW_AT_producer;
}


_has_comment() {
  objdump -h -w "$1"|grep -q '[0-9]\+ \.comment';
}


_has_gcc_flags() {
  objdump -h -w "$1"|grep -q '[0-9]\+ \.GCC\.command\.line';
}


# ---------------------------------------------------------------------------- #

if _has_dwarf "$TARGET"; then
  exec objdump -w -Wi --dwarf-start=0 --dwarf-depth="$DWARF_DEPTH" "$TARGET";
elif _has_gcc_flags "$TARGET"; then
  exec readelf -p .GCC.command.line "$TARGET";
else
  echo "File \`$TARGET' does not contain metadata for compilation flags" \
       > /dev/stderr;
  exit 0;
fi


# ---------------------------------------------------------------------------- #



# ============================================================================ #
# vim: set filetype=sh :
