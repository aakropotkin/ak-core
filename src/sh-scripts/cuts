#! /usr/bin/env sh
# -*- mode: sh-mode; -*-
# ============================================================================ #
#
#
# ---------------------------------------------------------------------------- #

set -eu;

: "${SED=sed}";
: "${CAT=cat}";
: "${CUT=cut}";
: "${TR=tr}";
: "${PRINTF=printf}";
: "${ECHO=echo}";
: "${TEST=test}";
: "${TRUE=:}";

as_me="cuts";

# ---------------------------------------------------------------------------- #

usage() {
  $ECHO "\
USAGE: $as_me OPTION... [FILE]
Print selected parts of FILE to standard output.

With no FILE, or when FILE is -, read standard input.

Mandatory arguments to long options are mandatory for short options too.
  -d   use DELIMS instead of TAB/SPACE for field delimiters
  -f   select only these fields;  also print any line that contains no
       delimiter character.
Each LIST is made up of one range, or many ranges separated by commas.
Selected input is written in the same order that it is read, and is written
exactly once.
Each range is one of:

  N     N'th byte, character or field, counted from 1
  N-    from N'th byte, character or field, to end of line
  N-M   from N'th to M'th (included) byte, character or field
  -M    from first to M'th (included) byte, character or field

GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
Full documentation <https://www.gnu.org/software/coreutils/cut>
or available locally via: info '(coreutils) cut invocation'
";
}


# ---------------------------------------------------------------------------- #

field=1;
delims=' \t';
case "$*" in
  *--help*) usage; exit 0;
esac

ARGS=$( getopt -o hf:d: -- "$@"; );
RSL="$?";
if $TEST "$RSL" != 0; then
  $ECHO "Failed to parse arguments: $*" > /dev/stderr;
  exit 1;
fi

eval set -- "$ARGS";
while $TRUE; do
  case "$1" in
    -d)  shift; delims="$1"; ;;
    -f)  shift; field="$1"; ;;
    -h)  usage; exit 0; ;;
    --)  shift; break;  ;;
    *)
      $ECHO "Unrecognized argument: $1" > /dev/stderr;
      usage > /dev/stderr;
      exit 1;
    ;;
  esac
  shift;
done


# ---------------------------------------------------------------------------- #

# Replace all delimiters with "ACK" character, which is assumed to never appear
# in actual inputs... because why would it?
# `tr -s' "joins" repeated output characters, which in this case effectively
# causes `cuts' to ignore empty fields.
$CAT "${@:-/dev/stdin}"                        \
  |$TR -s "$delims" '\06'                      \
  |$CUT -d "$( printf '\x06'; )" -f "$field";


# ---------------------------------------------------------------------------- #



# ============================================================================ #
# vim: set filetype=sh :
