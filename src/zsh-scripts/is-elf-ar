#! /usr/bin/env zsh
# -*- mode: shell; sh-shell: zsh; -*-
# ============================================================================ #


# ---------------------------------------------------------------------------- #

function usage() {
MESSAGE="\
Usage: is-elf-ar [OPTION...] FILE
Detect if file is an AR archive containing ELF Compilation Units
( conventionally a \`.a' file containing \`.o' files ).
Return code 0 indicates true, while 1 indicates false.
Any return code other than 0 or 1 indicates an error.

By default all archive members must be ELF Compilation Units to indicate true,
an exception is made for \`__.LIBDEP' members which may appear in archives
created using \`ar ... --record-libdeps=...' and \`ar ... -l ...' invocations
in \`ar' versions after 2.36. See \`--any' option.

By default the filesystem extension is not relevant for detection,
testing is performed by interpreting the output of the \`file' command.
Use of the \`--simple' option overrides this default allowing for faster
detection by naively assuming any \`.o' members are ELF Compilation Units.


Summary of options:
  -v, --verbose    Print 'true' or 'false' in addition to returning 0/non-0.
  -F, --no-false   Only return non-zero for errors. Implies \`--verbose'.
  -a, --any        Indicate true if any archive member is an ELF CU.
  -s, --simple     Assume \`.o' members are ELF CU files for fast checking.
  -h, --help       Print this usage message.";
  echo "${MESSAGE}";
}


# ---------------------------------------------------------------------------- #

# Parse options

zparseopts -D v=_verbose -verbose=_verbose   \
              F=_nofalse -no-false=_nofalse  \
              a=_any     -any=_any           \
              s=_simple  -simple=_simple     \
              h=_help    -help=_help;

verbose=${#_verbose};
nofalse=${#_nofalse};
any=${#_any};
simple=${#_simple};
help=${#_help};


# ---------------------------------------------------------------------------- #

# Show Usage if requested

if test ${help} -gt 0; then
  usage;
  exit 0;
fi


# ---------------------------------------------------------------------------- #

# Parse remaining arguments

file=${1};
shift;

# `--no-false' implies `--verbose'
if test ${nofalse} -gt 0; then
  verbose=1;
fi


# ---------------------------------------------------------------------------- #

# Catch Errors

if ! test -e ${file}; then
  echo "No such file : ${file}!" >&2;
  exit 2;
fi


if test ${#} -gt 0; then
  echo "Too many arguments were provided!" >&2;
  usage >&2;
  exit 3;
fi


# ---------------------------------------------------------------------------- #

# Checks that file is an archive

if file -Lb ${file}|grep -q ' ar archive$'; then
  if test ${verbose} -gt 0; then
    echo true;
  fi
  exit 0;
else
  if test ${verbose} -gt 0; then
    echo false;
    if test ${nofalse} -gt 0; then
      exit 0;
    fi
  fi
  exit 1;
fi


# ---------------------------------------------------------------------------- #

# Handle `--simple' option

if test ${simple} -gt 0; then

  rsl=0;

  if test ${any} -gt 0; then
    # If no objects end in `.o' extension, return false.
    if ! ar t ${file}|grep -q '\.o$'; then
      rsl=1;
    fi
  else
    # If any object other than `__.LIBDEPS' has an extension other than `.o',
    # return false.
    if ar t ${file}|grep -qv '\(__\.LIBDEPS\|\.o\)$'; then
      rsl=1;
    fi
  fi

  # Return result.
  if test ${rsl} = 0; then
    if test ${verbose} -gt 0; then
      echo true;
    fi
    exit 0;
  else
    if test ${verbose} -gt 0; then
      echo false;
      if test ${nofalse} -gt 0; then
        exit 0;
      fi
    fi
    exit 1;
  fi
fi


# ---------------------------------------------------------------------------- #

# Unpack archive members, and check if it contains ELF CUs

# Make a temporary directory, delete it if the user tries to kill the script.
tdir=$( mktemp -dt is-elf-ar-XXXX; );
trap "rm -rf ${tdir}; exit 4;" 1 2 3 13 15;

ar -x --output ${tdir} ${file};

rsl=0;
for f in $( find ${tdir}/ -not -name '__.LIBDEP' -not -type d; ); do
  if file -Lb ${f}|grep -q '^ELF \(32\|64\)-bit LSB relocatable, '; then
    if test ${any} -gt 0; then
      rsl=0;
      break;
    fi
  else
    rsl=1;
  fi
done

# Cleanup
rm -rf ${tdir};

# Report results
if test ${rsl} = 0; then
  if test ${verbose} -gt 0; then
    echo true;
  fi
  exit 0;
else
  if test ${verbose} -gt 0; then
    echo false;
    if test ${nofalse} -gt 0; then
      exit 0;
    fi
  fi
  exit 1;
fi


# ---------------------------------------------------------------------------- #



# ============================================================================ #
# vim: set filetype=zsh :
